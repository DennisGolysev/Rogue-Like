public class Roomgeneration {
	private int pity_;
	private int maxH_;
	private int maxW_;
	private Room root_;
	
	public Roomgeneration() {
		pity_ = // new Random 1-5
		maxH_ = 11;
		maxW_ = 11;
		
		root_ = GenerateRoom();
	}
	
	public Room GenerateRoom() {
		int nCount = // new Random 0-3
		return new Room(maxH_, maxW_, nCount, 0, null);
	}
}

public class Room {
	private int roomDifficulty_;
	private int h_;
	private int w_;
	
	private boolean[] doors;
	private Room[] neighbours;
	
	public Room(int difficulty, int h, int w, int nCount, int originSide, Room originRoom) {
		roomDifficulty_ = difficulty;
		h_ = h;
		w_ = w;
		
		if(originRoom != null) {
			doors[originSide] = true;
			neighbours[originSide] = originRoom;
		}
		
		for(int i = 0; i < nCount; i++) {
			doors[i] = true;
		}
	}
	
	//Spieler Ã¼bermittelt:
	//Himmelsrichtigung des neuen Raums in int (Norden ist 0)
	public void GenerateRoom(int side) {
		if(doors[side]) {
			int nCount = // new Random 0-3
			RoomDirection rDir = new RoomDirection(side);
			neighbours[side] = new Room(roomDifficulty_ + 1, h_, w_, nCount, rDir.inc(2), this);
		}
	}
	
	public void GenerateEnemy() {
		
	}
	
	public void GenerateLayout() {
		
	}
}

public class RoomDirection {
    private int value;

    public RoomDirection(int value) {
        this.value = value;
    }

    public void inc(int num) {
        for(int i = 0; i < num; i++) {
            if(value < 3) {
                value = value + 1;
            } else {
                value = 0;
            }
        }
    }
}
